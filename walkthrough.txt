
just to be ultra-clear (a small confusion will recursively grow larger with no base case in sight!)

=> the important line: [[number * factorial(number-1)]]

let's evaluate it from left to right...

5 * (factorial(4))

well factorial(4) has it's own evaluation via the above line, which is:

4 * factorial(3)

so now we have:

5 * ( 4 * factorial(3)) 

continuing to evalute the ruby expression factorial(3) we arrive at:

3 * factorial(2) 

replacing the expression with the value in our running chain we get: 

5 * ( 4 * ( 3 * factorial(2)))

following the trend of evaluation... 

5 * ( 4 * ( 3 * ( 2 * factorial(1))))

and one more time:

5 * ( 4 * ( 3 * ( 2 * ( 1 * factorial(0)))))

5 * ( 4 * ( 3 * ( 2 * ( 1 * ( 1 )))))

each time we get an expression rather than a *math-able* return value, we're going to continue interpreting and replacing. to see it a little more visually, here's stepping through factorial(5) like an interpreter..

factorial(5) => is 5 == 0 ? no. return 5 * factorial(4) 
    factorial(4) => is 4 == 0 ? no. return 4 * factorial(3)
        factorial(3) => is 3 == 0 ? no. return 3 * factorial(2)
            factorial(2) => is 2 == 0 ? no. return 2 * factorial(1)
                factorial(1) => is 1 == 0 ? no. return 1 * factorial(0)
                    factorial(0) => is 0 == 0 ? yes! return 1

                    finally, nothing else to evalutate. we landed on a number. 

so now that we now that factorial(0) returns 1, we can go up the stack and replace factorial(0) with 1:

factorial(1) => return 1 * factorial(0) 
factorial(1) => return 1 * (1)
factorial(1) => return 1

now pop that back up a level again, look for an expression for which you know the return value and substitute it...

factorial(2) => return 2 * factorial(1)
factorial(2) => return 2 * (1)
factorial(2) => return 2

up a level again:

factorial(3) => return 3 * factorial(2)
factorial(3) => return 3 * (2)
factorial(3) => return 6

...

factorial(4) => return 4 * factorial(3)
factorial(4) => return 4 * (6)
factorial(4) => return 24

last one!

factorial(5) => return 5 * factorial(4)
factorial(5) => return 5 * (24)
factorial(5) => return 120

and there we have it. factorial(5) returns 120. 
 
to really drive the point home in a beautiful pure number cascade: 


5 * ( 4 * ( 3 * ( 2 * ( 1 * ( 1 )))))   
5 * ( 4 * ( 3 * ( 2 * ( 1 * 1 )))))  
5 * ( 4 * ( 3 * ( 2 * ( 1 ))))
5 * ( 4 * ( 3 * ( 2 * 1 )))
5 * ( 4 * ( 3 * ( 2 )))
5 * ( 4 * ( 3 * 2 ))
5 * ( 4 * ( 6 ))
5 * ( 4 * 6 )
5 * ( 24 )
5 * 24
120

you see the importance of the base case. when the interpreter can finally stop recursing and start returning, the big stack of self-similar calls falls back into itself like an imploding building. finite recursion, while dense, is not entirely elusive. It's *infinite* recursion that is impossible to imagine (you think you're imagining it right now but you're merely imagining an infinitely small portion of it.) 
